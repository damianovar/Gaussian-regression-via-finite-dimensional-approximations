function sigma2 = EstimateVarianceOfTheColoradoRainNoise( 	...
								strFilename,				...
								iMonth,						...
								tKernelParameters,			...
								fSpaceFactor				)
	%
	[	ffTrainingInputLocations,			...
		iiTrainingInputLocationsIndexes,	...
		afTrainingMeasurements,				...
		ffTestInputLocations,				...
		iiTestInputLocationsIndexes,		...
		afTestMeasurements	] =				...
			GetColoradoRainData(			...
				strFilename,				...
				iMonth,						...
				1,							...
				tKernelParameters,			...
				fSpaceFactor				);
	%
	% compute the LS solution
	gamma = 0;
	E = min( numel( tKernelParameters.afEigenvalues ), 100 );
	%
	[ ffEstimatedF, a_hat ] = EstimateProcessA( iiTrainingInputLocationsIndexes, afTrainingMeasurements, gamma, E, tKernelParameters ); TO FIX
	%
	% compute the residuals
	fTrainingRSSs = 0;
	for iTrainingDatum = 1:numel(afTrainingMeasurements)
		%
		fCurrentDistance =																...
				afTrainingMeasurements(iTrainingDatum)									...
			-	ffEstimatedF(	iiTrainingInputLocationsIndexes(iTrainingDatum, 1),		...
								iiTrainingInputLocationsIndexes(iTrainingDatum, 2)		); TO FIX
		%
		fTrainingRSSs = fTrainingRSSs + fCurrentDistance^2;
		%
	end;%
	%
	sigma2 = fTrainingRSSs / ( numel(afTrainingMeasurements) - E );
	%
end % function

